/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define DEFAULT_L 0

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    combos {
        compatible = "zmk,combos";

        other {
            bindings = <&mo 6>;
            key-positions = <34 35>;
        };

        lctrl {
            bindings = <&kp LCTRL>;
            key-positions = <12 31>;
        };

        lalt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <11 31>;
        };

        lwin {
            bindings = <&kp LEFT_WIN>;
            key-positions = <10 31>;
        };

        rctrl {
            bindings = <&kp LCTRL>;
            key-positions = <17 34>;
        };

        ralt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <18 34>;
        };

        rwin {
            bindings = <&kp LEFT_WIN>;
            key-positions = <19 34>;
        };

        lshift {
            bindings = <&kp LSHIFT>;
            key-positions = <13 31>;
        };

        rshift {
            bindings = <&kp LSHIFT>;
            key-positions = <16 34>;
        };

        lshift+lctrl {
            bindings = <&kp LS(LCTRL)>;
            key-positions = <13 12 31>;
        };

        rshift+rctrl {
            bindings = <&kp LS(LCTRL)>;
            key-positions = <16 17 34>;
        };

        lctrl+lalt {
            bindings = <&kp LC(LEFT_ALT)>;
            key-positions = <11 12 31>;
        };

        rctrl+ralt {
            bindings = <&kp LC(LEFT_ALT)>;
            key-positions = <17 18 34>;
        };

        lwin+lalt {
            bindings = <&kp LA(LEFT_WIN)>;
            key-positions = <10 11 31>;
        };

        rwin+ralt {
            bindings = <&kp LA(LEFT_WIN)>;
            key-positions = <34 18 19>;
        };

        lshift+lalt+lctrl {
            bindings = <&kp LS(LA(LCTRL))>;
            key-positions = <13 12 31 11>;
        };

        rshift+ralt+rctrl {
            bindings = <&kp LS(LA(LCTRL))>;
            key-positions = <16 17 18 34>;
        };

        lctrl+lwin {
            bindings = <&kp LC(LEFT_WIN)>;
            key-positions = <10 31 12>;
        };

        rctrl+rwin {
            bindings = <&kp LC(LEFT_WIN)>;
            key-positions = <17 19 34>;
        };

        lalt+lshift {
            bindings = <&kp LA(LEFT_SHIFT)>;
            key-positions = <31 11 13>;
        };

        ralt+rshift {
            bindings = <&kp LA(LEFT_SHIFT)>;
            key-positions = <16 18 34>;
        };

        lwin+lshift {
            bindings = <&kp LG(LEFT_SHIFT)>;
            key-positions = <31 13 10>;
        };

        rwin+rshift {
            bindings = <&kp LG(LEFT_SHIFT)>;
            key-positions = <16 19 34>;
        };
    };

    behaviors {
        colon: colon {
            compatible = "zmk,behavior-mod-morph";
            label = "COLON";
            bindings = <&kp COLON>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        l_home_mod: l_home_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "L_HOME_MOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 18 19 25 26 27 28 29 17 33 34 35 32>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        r_home_mod: r_home_mod {
            compatible = "zmk,behavior-hold-tap";
            label = "R_HOME_MOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-key-positions = <0 4 10 11 12 13 14 20 21 22 23 24 30 31 32 3 2 1>;
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "DEF";
            bindings = <
  &kp SLASH  &kp COMMA  &kp PERIOD  &kp P        &kp Y        &kp F        &kp G            &kp C            &kp R  &kp L
  &kp A      &kp O      &kp E       &kp U        &kp I        &kp D        &kp H            &kp T            &kp N  &kp S
  &kp SQT    &kp Q      &kp J       &kp K        &kp X        &kp B        &kp M            &kp W            &kp V  &kp Z
                        &lt 5 ESC   &lt 1 SPACE  &lt 2 TAB    &lt 4 ENTER  &lt 3 BACKSPACE  &kp RIGHT_SHIFT
            >;
        };

        symbols {
            bindings = <
  &trans    &mkp MCLK  &mkp RCLK  &mkp LCLK  &trans    &kp LEFT_BRACE        &kp AMPERSAND  &kp ASTERISK  &kp PLUS    &kp RIGHT_BRACE
  &kp LGUI  &kp LALT   &kp LCTRL  &kp LSHFT  &trans    &kp LEFT_PARENTHESIS  &kp EQUAL      &kp PERCENT   &kp DOLLAR  &kp RIGHT_PARENTHESIS
  &trans    &mkp MCLK  &mkp RCLK  &mkp LCLK  &trans    &kp LEFT_BRACKET      &kp EXCL       &kp AT        &kp HASH    &kp RIGHT_BRACKET
                       &trans     &trans     &trans    &kp MINUS             &kp UNDER      &colon
            >;
        };

        numbers {
            bindings = <
  &trans    &trans    &trans     &trans     &trans    &kp CARET     &kp N7        &kp N8        &kp N9        &kp BACKSLASH
  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &kp QUESTION  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp SLASH
  &trans    &trans    &trans     &trans     &trans    &kp SLASH     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp TILDE
                      &trans     &trans     &trans    &kp GRAVE     &kp N0        &kp PERIOD
            >;
        };

        movement {
            bindings = <
  &kp DELETE  &kp HOME        &kp UP_ARROW  &kp END    &kp PAGE_UP      &trans  &trans     &trans     &kp DEL   &trans
  &trans      &kp LEFT_ARROW  &kp DOWN      &kp RIGHT  &kp PAGE_DOWN    &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI
  &trans      &trans          &trans        &trans     &trans           &trans  &kp LEFT   &kp RIGHT  &trans    &trans
                              &trans        &kp ESC    &trans           &trans  &trans     &trans
            >;
        };

        functions {
            bindings = <
  &kp PRINTSCREEN  &kp F7  &kp F8  &kp F9  &kp F12    &kp C_PREVIOUS    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT  &trans
  &kp CAPS         &kp F4  &kp F5  &kp F6  &kp F11    &kp C_PLAY_PAUSE  &kp LSHFT     &kp LCTRL     &kp LALT    &kp LGUI
  &trans           &kp F1  &kp F2  &kp F3  &kp F10    &kp C_MUTE        &trans        &trans        &trans      &trans
                           &trans  &trans  &trans     &trans            &trans        &trans
            >;
        };

        mouse {
            bindings = <
  &trans  &trans     &trans     &trans     &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &mkp MCLK  &mkp RCLK  &mkp LCLK  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans     &trans     &trans     &trans    &trans  &trans  &trans  &trans  &trans
                     &trans     &trans     &trans    &trans  &trans  &trans
            >;
        };

        other {
            bindings = <
  &trans          &trans  &trans        &bt BT_SEL 2  &bt BT_SEL 3    &trans  &trans  &trans  &trans  &soft_off
  &trans          &trans  &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans
  &bt BT_CLR_ALL  &trans  &bt BT_SEL 2  &bt BT_SEL 3  &trans          &trans  &trans  &trans  &trans  &trans
                          &bt BT_SEL 0  &bt BT_SEL 1  &trans          &trans  &trans  &trans
            >;
        };
    };
};
